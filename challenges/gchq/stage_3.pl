#!/usr/bin/perl -w
#
# GCHQ Challenge part 3
# Author: Ben Pottier
#

use strict;
use Data::Dumper;
use Switch; 

# VM definition
print "Initialising VM...\n";
my %VM = (
  	'cpu' => {
		'ip' => 0x0,

		'r0' => 0x00,
		'r1' => 0x00,
		'r2' => 0x00,
		'r3' => 0x00,

		'cs' => 0,
		'ds' => 0x10,
		'fl' => 0
  	},
	'mem' => [
    0x31, 0x04, 0x33, 0xaa, 0x40, 0x02, 0x80, 0x03, 0x52, 0x00, 0x72, 0x01, 0x73, 0x01, 0xb2, 0x50,
    0x30, 0x14, 0xc0, 0x01, 0x80, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x98, 0xab, 0xd9, 0xa1, 0x9f, 0xa7, 0x83, 0x83, 0xf2, 0xb1, 0x34, 0xb6, 0xe4, 0xb7, 0xca, 0xb8,
    0xc9, 0xb8, 0x0e, 0xbd, 0x7d, 0x0f, 0xc0, 0xf1, 0xd9, 0x03, 0xc5, 0x3a, 0xc6, 0xc7, 0xc8, 0xc9,
    0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
    0xda, 0xdb, 0xa9, 0xcd, 0xdf, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
    0x26, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
    0x7d, 0x1f, 0x15, 0x60, 0x4d, 0x4d, 0x52, 0x7d, 0x0e, 0x27, 0x6d, 0x10, 0x6d, 0x5a, 0x06, 0x56,
    0x47, 0x14, 0x42, 0x0e, 0xb6, 0xb2, 0xb2, 0xe6, 0xeb, 0xb4, 0x83, 0x8e, 0xd7, 0xe5, 0xd4, 0xd9,
    0xc3, 0xf0, 0x80, 0x95, 0xf1, 0x82, 0x82, 0x9a, 0xbd, 0x95, 0xa4, 0x8d, 0x9a, 0x2b, 0x30, 0x69,
    0x4a, 0x69, 0x65, 0x55, 0x1c, 0x7b, 0x69, 0x1c, 0x6e, 0x04, 0x74, 0x35, 0x21, 0x26, 0x2f, 0x60,
    0x03, 0x4e, 0x37, 0x1e, 0x33, 0x54, 0x39, 0xe6, 0xba, 0xb4, 0xa2, 0xad, 0xa4, 0xc5, 0x95, 0xc8,
    0xc1, 0xe4, 0x8a, 0xec, 0xe7, 0x92, 0x8b, 0xe8, 0x81, 0xf0, 0xad, 0x98, 0xa4, 0xd0, 0xc0, 0x8d,
    0xac, 0x22, 0x52, 0x65, 0x7e, 0x27, 0x2b, 0x5a, 0x12, 0x61, 0x0a, 0x01, 0x7a, 0x6b, 0x1d, 0x67,
    0x75, 0x70, 0x6c, 0x1b, 0x11, 0x25, 0x25, 0x70, 0x7f, 0x7e, 0x67, 0x63, 0x30, 0x3c, 0x6d, 0x6a,
    0x01, 0x51, 0x59, 0x5f, 0x56, 0x13, 0x10, 0x43, 0x19, 0x18, 0xe5, 0xe0, 0xbe, 0xbf, 0xbd, 0xe9,
    0xf0, 0xf1, 0xf9, 0xfa, 0xab, 0x8f, 0xc1, 0xdf, 0xcf, 0x8d, 0xf8, 0xe7, 0xe2, 0xe9, 0x93, 0x8e,
    0xec, 0xf5, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x37, 0x7a, 0x07, 0x11, 0x1f, 0x1d, 0x68, 0x25, 0x32, 0x77, 0x1e, 0x62, 0x23, 0x5b, 0x47, 0x55,
    0x53, 0x30, 0x11, 0x42, 0xf6, 0xf1, 0xb1, 0xe6, 0xc3, 0xcc, 0xf8, 0xc5, 0xe4, 0xcc, 0xc0, 0xd3,
    0x85, 0xfd, 0x9a, 0xe3, 0xe6, 0x81, 0xb5, 0xbb, 0xd7, 0xcd, 0x87, 0xa3, 0xd3, 0x6b, 0x36, 0x6f,
    0x6f, 0x66, 0x55, 0x30, 0x16, 0x45, 0x5e, 0x09, 0x74, 0x5c, 0x3f, 0x29, 0x2b, 0x66, 0x3d, 0x0d,
    0x02, 0x30, 0x28, 0x35, 0x15, 0x09, 0x15, 0xdd, 0xec, 0xb8, 0xe2, 0xfb, 0xd8, 0xcb, 0xd8, 0xd1,
    0x8b, 0xd5, 0x82, 0xd9, 0x9a, 0xf1, 0x92, 0xab, 0xe8, 0xa6, 0xd6, 0xd0, 0x8c, 0xaa, 0xd2, 0x94,
    0xcf, 0x45, 0x46, 0x67, 0x20, 0x7d, 0x44, 0x14, 0x6b, 0x45, 0x6d, 0x54, 0x03, 0x17, 0x60, 0x62,
    0x55, 0x5a, 0x4a, 0x66, 0x61, 0x11, 0x57, 0x68, 0x75, 0x05, 0x62, 0x36, 0x7d, 0x02, 0x10, 0x4b,
    0x08, 0x22, 0x42, 0x32, 0xba, 0xe2, 0xb9, 0xe2, 0xd6, 0xb9, 0xff, 0xc3, 0xe9, 0x8a, 0x8f, 0xc1,
    0x8f, 0xe1, 0xb8, 0xa4, 0x96, 0xf1, 0x8f, 0x81, 0xb1, 0x8d, 0x89, 0xcc, 0xd4, 0x78, 0x76, 0x61,
    0x72, 0x3e, 0x37, 0x23, 0x56, 0x73, 0x71, 0x79, 0x63, 0x7c, 0x08, 0x11, 0x20, 0x69, 0x7a, 0x14,
    0x68, 0x05, 0x21, 0x1e, 0x32, 0x27, 0x59, 0xb7, 0xcf, 0xab, 0xdd, 0xd5, 0xcc, 0x97, 0x93, 0xf2,
    0xe7, 0xc0, 0xeb, 0xff, 0xe9, 0xa3, 0xbf, 0xa1, 0xab, 0x8b, 0xbb, 0x9e, 0x9e, 0x8c, 0xa0, 0xc1,
    0x9b, 0x5a, 0x2f, 0x2f, 0x4e, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ]
);

print "Executing VM...\n";
if(!execute_VM()){
  print "ERROR: VM halted, dumping memory...\n\n";
  dump_mem(\@{$VM{'mem'}});
  print "\n";
}

print "Completed.\n";
exit(0);

###### SUBS ######

sub execute_VM {
  while(1){
     my $firstByte = $VM{mem}[$VM{cpu}->{ip}];
     my $secondByte = $VM{mem}[$VM{cpu}->{ip} + 1];
 
     my $opcode = ($firstByte & 0xE0) >> 5;
     my $mod = ($firstByte & 0x10) >> 4;
     my $op1 = $firstByte & 0xF;
     my $op2 = $secondByte & 0xFF;

     my $inc = 0;

     switch($opcode){
	# JMP
	case 0x0 {
	    my $op1val = read_reg($op1);

	    if($mod == 0){
		my $jumpto = ($VM{cpu}->{cs}*16) + $op1val;
		$VM{cpu}->{ip} = $jumpto;
	    }else{
		my $jumpto = ($op2*16) + $op1val;
                $VM{cpu}->{ip} = $jumpto;
		$VM{cpu}->{cs} = $op2;
	    }
	    $inc = 0;
	}
	# MOVR
	case 0x1 { 
	    if($mod == 0){
		my $op2val = read_reg($op2);
		write_reg($op1, $op2val);
            }else{
		write_reg($op1, $op2);
            }
	    $inc = 2;
	}
	# MOVM
	case 0x2 {
	    if($mod == 0){
		my $op2val = read_reg($op2);
		my $address = ($VM{cpu}->{ds}*16) + $op2val;	
		my $op1val = $VM{mem}[$address];
		write_reg($op1, $op1val);
	    }else{
		my $op1val = read_reg($op1);
                my $op2val = read_reg($op2);
                my $address = ($VM{cpu}->{ds}*16) + $op1val;
		$VM{mem}[$address] = $op2val;
	    }
	    $inc = 2;
	}
	# ADD
	case 0x3 {
	    if($mod == 0){
	        my $op1val = read_reg($op1);
                my $op2val = read_reg($op2);
		my $add = $op1val + $op2val;
		write_reg($op1, $add);
	    }else{
		my $op1val = read_reg($op1);
                my $add = $op1val + $op2;
                write_reg($op1, $add);
	    }
	    $inc = 2;
	}
	# XOR
	case 0x4 {
   	    if($mod == 0){
                my $op1val = read_reg($op1);
                my $op2val = read_reg($op2);
                my $xor = $op1val ^ $op2val;
                write_reg($op1, $xor);
            }else{
                my $op1val = read_reg($op1);
                my $xor = $op1val ^ $op2;
                write_reg($op1, $xor);
            }
            $inc = 2;
	}
	# CMP
	case 0x5 {
	    my $op1val = read_reg($op1);
	    my $op2val = $op2;
	    if($mod == 0){
                $op2val = read_reg($op2); # read op2 from reg if mod0, in mod1 we take direct immediate value
            }
	    if($op1val == $op2val){
	        $VM{cpu}->{fl} = 0;
	    }elsif($op1val < $op2val){
		$VM{cpu}->{fl} = 0xff;
	    }elsif($op1val > $op2val){
		$VM{cpu}->{fl} = 0x1;
	    } 
	    $inc = 2;
	}
	# JMPE
	case 0x6 {
	    if($mod == 0){
   	        if($VM{cpu}->{fl} == 0){
		    my $op1val = read_reg($op1);
		    $VM{cpu}->{ip} = $op1val;
  		    $inc = 0;
                }else{
	  	    # NOP
		    $inc = 1;
                }
	     }else{
		if($VM{cpu}->{fl} == 0){
                    my $op1val = read_reg($op1);
		    $VM{cpu}->{cs} = $op2;
                    $VM{cpu}->{ip} = ($op2*16) + $op1val;
                    $inc = 0;
                }else{
                    # NOP
                    $inc = 2;
                }
	     } 
	 }
	case 0x7 { return 0; }
	else { die "Invalid opcode $opcode\n\n"; } 
     }
    
     $VM{cpu}->{ip} += $inc;  
  } 
}

sub read_reg {
   my $ix = shift;
   switch($ix){
	case 0 { return $VM{cpu}->{r0}; }
        case 1 { return $VM{cpu}->{r1}; }
        case 2 { return $VM{cpu}->{r2}; }
        case 3 { return $VM{cpu}->{r3}; }
        case 4 { return $VM{cpu}->{cs}; }
        case 5 { return $VM{cpu}->{ds}; }
   }
}

sub write_reg {
   my $ix = shift;
   my $val = shift;
   switch($ix){
	case 0 { $VM{cpu}->{r0} = $val; }
        case 1 { $VM{cpu}->{r1} = $val; }
        case 2 { $VM{cpu}->{r2} = $val; }
        case 3 { $VM{cpu}->{r3} = $val; }
        case 4 { $VM{cpu}->{cs} = $val; }
        case 5 { $VM{cpu}->{ds} = $val; }
   }
}

sub dump_mem {
   my $memRef = shift;
   my $i;
   my $mem_length = scalar(@$memRef);
   for($i = 0; $i < $mem_length; $i++){
	# 16 byte segments
	if($i % 16 == 0){
	    print "\n";
	}
	printf("0x%02x, ", $memRef->[$i]);
   }
   print "\n";
    for($i = 0; $i < $mem_length; $i++){
        # 16 byte segments
        if($i % 16 == 0){
            print "\n";
        }
        printf("%c", $memRef->[$i]);
   }
}

